require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccountsController, :type => :controller do

  before(:each) do
    request.env["HTTP_REFERER"] = "where_i_came_from"
  end

  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    #skip("Add a hash of attributes valid for your model")
    {:name => "Account", :accounttype => "Asset", :amount => 0}
  }

  let(:invalid_attributes) {
    #skip("Add a hash of attributes invalid for your model")
    {:name => 00, :accounttype => 00, :amount => 0}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController. Be sure to keep this updated too.
  let(:valid_session) { {:name => "Account", :accounttype => "Asset", :amount => 0} }

  describe "GET index" do
    login_user
    it "assigns all accounts as @accounts" do
      account = Account.create! valid_attributes
      get :index, {}
      expect(assigns(:accounts)).to eq([account])
    end
  end

  describe "GET show" do
    login_user
    it "assigns the requested account as @account" do
      account = Account.create! valid_attributes
      get :show, {:id => account.to_param}
      expect(assigns(:account)).to eq(account)
    end
  end

  describe "GET new" do
    login_user
    it "assigns a new account as @account" do
      get :new, {}
      expect(assigns(:account)).to be_a_new(Account)
    end
  end

  describe "GET edit" do
    login_user
    it "assigns the requested account as @account" do
      account = Account.create! valid_attributes
      get :edit, {:id => account.to_param}
      expect(assigns(:account)).to eq(account)
    end
  end

  describe "POST create" do
    login_user
    describe "with valid params" do
      it "creates a new Account" do
        subject.current_user.should_not be_nil
        expect {
          post :create, {:account => valid_attributes}
        }.to change(Account, :count).by(1)
      end

      it "assigns a newly created account as @account" do
        post :create, {:account => valid_attributes}
        expect(assigns(:account)).to be_a(Account)
        expect(assigns(:account)).to be_persisted
      end

      it "redirects to the created account" do
        post :create, {:account => valid_attributes}
        expect(response).to redirect_to(Account)
      end
    end
  end

  describe "with invalid params" do
    login_user
    it "assigns a newly created but unsaved account as @account" do
      post :create, {:account => invalid_attributes}
      expect(assigns(:account)).to be_a_new(Account)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      login_user
      let(:new_attributes) {
        #skip("Add a hash of attributes valid for your model")
        {:name => "New", :accounttype => "Equity", :amount => 0}
      }

      it "updates the requested account" do
        account = Account.create! valid_attributes
        put :update, {:id => account.to_param, :account => new_attributes}
        account.reload
        #skip("Add assertions for updated state")
        expect(assigns(:account)).to eq(account)
      end

      it "assigns the requested account as @account" do
        account = Account.create! valid_attributes
        put :update, {:id => account.to_param, :account => valid_attributes}
        expect(assigns(:account)).to eq(account)
      end

      it "redirects to the account" do
        account = Account.create! valid_attributes
        put :update, {:id => account.to_param, :account => valid_attributes}
        expect(response).to redirect_to(account)
      end
    end

    describe "with invalid params" do
      login_user
      it "assigns the account as @account" do
        account = Account.create! valid_attributes
        put :update, {:id => account.to_param, :account => invalid_attributes}
        expect(assigns(:account)).to eq(account)
      end

      it "re-renders the 'edit' template" do
        account = Account.create! valid_attributes
        put :update, {:id => account.to_param, :account => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    login_user
    it "destroys the requested account" do
      account = Account.create! valid_attributes
      expect {
        delete :destroy, {:id => account.to_param}
      }.to change(Account, :count).by(-1)
    end

    it "redirects to the accounts list" do
      account = Account.create! valid_attributes
      delete :destroy, {:id => account.to_param}
      expect(response).to redirect_to(accounts_url)
    end
  end

end
